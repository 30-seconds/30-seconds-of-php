{"all":{"prefix":"30php_all","body":["function all($items, $func)","{","    return count(array_filter($items, $func)) === count($items);","}",""],"description":"Returns `true` if the provided function returns `true` for all elements of an array, `false` otherwise."},"any":{"prefix":"30php_any","body":["function any($items, $func)","{","    return count(array_filter($items, $func)) > 0;","}",""],"description":"Returns `true` if the provided function returns `true` for at least one element of an array, `false` otherwise."},"deepFlatten":{"prefix":"30php_deepFlatten","body":["function deepFlatten($items)","{","    $result = [];","    foreach ($items as $item) {","        if (!is_array($item)) {","            $result[] = $item;","        } else {","            $result = array_merge($result, deepFlatten($item));","        }","    }","","    return $result;","}",""],"description":"Deep flattens an array."},"drop":{"prefix":"30php_drop","body":["function drop($items, $n = 1)","{","    return array_slice($items, $n);","}",""],"description":"Returns a new array with `n` elements removed from the left."},"findLast":{"prefix":"30php_findLast","body":["function findLast($items, $func)","{","    $filteredItems = array_filter($items, $func);","","    return array_pop($filteredItems);","}",""],"description":"Returns the last element for which the provided function returns a truthy value."},"findLastIndex":{"prefix":"30php_findLastIndex","body":["function findLastIndex($items, $func)","{","    $keys = array_keys(array_filter($items, $func));","","    return array_pop($keys);","}",""],"description":"Returns the index of the last element for which the provided function returns a truthy value."},"flatten":{"prefix":"30php_flatten","body":["function flatten($items)","{","    $result = [];","    foreach ($items as $item) {","        if (!is_array($item)) {","            $result[] = $item;","        } else {","            $result = array_merge($result, array_values($item));","        }","    }","","    return $result;","}",""],"description":"Flattens an array up to the one level depth."},"groupBy":{"prefix":"30php_groupBy","body":["function groupBy($items, $func)","{","    $group = [];","    foreach ($items as $item) {","        if ((!is_string($func) && is_callable($func)) || function_exists($func)) {","            $key = call_user_func($func, $item);","            $group[$key][] = $item;","        } elseif (is_object($item)) {","            $group[$item->{$func}][] = $item;","        } elseif (isset($item[$func])) {","            $group[$item[$func]][] = $item;","        }","    }","","    return $group;","}",""],"description":"Groups the elements of an array based on the given function."},"hasDuplicates":{"prefix":"30php_hasDuplicates","body":["function hasDuplicates($items)","{","    return count($items) > count(array_unique($items));","}",""],"description":"Checks a flat list for duplicate values. Returns `true` if duplicate values exists and `false` if values are all unique."},"head":{"prefix":"30php_head","body":["function head($items)","{","    return reset($items);","}",""],"description":"Returns the head of a list."},"last":{"prefix":"30php_last","body":["function last($items)","{","    return end($items);","}",""],"description":"Returns the last element in an array."},"pluck":{"prefix":"30php_pluck","body":["function pluck($items, $key)","{","    return array_map( function($item) use ($key) {","        return is_object($item) ? $item->$key : $item[$key];","    }, $items);","}",""],"description":"Retrieves all of the values for a given key:"},"pull":{"prefix":"30php_pull","body":["function pull(&$items, ...$params)","{","    $items = array_values(array_diff($items, $params));","    return $items;","}",""],"description":"Mutates the original array to filter out the values specified."},"reject":{"prefix":"30php_reject","body":["function reject($items, $func)","{","    return array_values(array_diff($items, array_filter($items, $func)));","}",""],"description":"Filters the collection using the given callback."},"remove":{"prefix":"30php_remove","body":["function remove($items, $func)","{","    $filtered = array_filter($items, $func);","","    return array_diff_key($items, $filtered);","}",""],"description":"Removes elements from an array for which the given function returns false."},"tail":{"prefix":"30php_tail","body":["function tail($items)","{","    return count($items) > 1 ? array_slice($items, 1) : $items;","}",""],"description":"Returns all elements in an array except for the first one."},"take":{"prefix":"30php_take","body":["function take($items, $n = 1)","{","    return array_slice($items, 0, $n);","}",""],"description":"Returns an array with n elements removed from the beginning."},"without":{"prefix":"30php_without","body":["function without($items, ...$params)","{","    return array_values(array_diff($items, $params));","}",""],"description":"Filters out the elements of an array, that have one of the specified values."},"orderBy":{"prefix":"30php_orderBy","body":["function orderBy($items, $attr, $order)","{","    $sortedItems = [];","    foreach ($items as $item) {","        $key = is_object($item) ? $item->{$attr} : $item[$attr];","        $sortedItems[$key] = $item;","    }","    if ($order === 'desc') {","        krsort($sortedItems);","    } else {","        ksort($sortedItems);","    }","","    return array_values($sortedItems);","}",""],"description":"Sorts a collection of arrays or objects by key."},"bubbleSort":{"prefix":"30php_bubbleSort","body":["function bubbleSort($array) {","    $array = array_unique($array);","    $arrayLength = count($array);","    for ($i = 0; $i < $arrayLength - 1; $i++) { ","        $swapped = false;","        for ($j = 0; $j < $arrayLength - 1 - $i; $j++) {","            if ($array[$j] > $array[$j + 1]) {","                $temp = $array[$j];","                $array[$j] = $array[$j + 1];","                $array[$j + 1] = $temp;","                $swapped = true;","            }","        }","        if (!$swapped) {","            break;","        }","    }","    return $array;","}",""],"description":"Sorts an array using a Bubble sort algorithm."},"rotate":{"prefix":"30php_rotate","body":["function rotate($array, $shift = 1)","{","    for ($i = 0; $i < $shift; $i++) {","        array_push($array, array_shift($array));","    }","","    return $array;","}",""],"description":"Rotates the array (in left direction) by the number of shifts."},"average":{"prefix":"30php_average","body":["function average(...$items)","{","    $count = count($items);","    ","    return $count === 0 ? 0 : array_sum($items) \/ $count;","}",""],"description":"Returns the average of two or more numbers."},"factorial":{"prefix":"30php_factorial","body":["function factorial($n)","{","    if ($n <= 1) {","        return 1;","    }","","    return $n * factorial($n - 1);","}",""],"description":"Calculates the factorial of a number."},"fibonacci":{"prefix":"30php_fibonacci","body":["function fibonacci($n)","{","    $sequence = [0, 1];","","    for ($i = 2; $i < $n; $i++) {","        $sequence[$i] = $sequence[$i-1] + $sequence[$i-2];","    }","","    return $sequence;","}",""],"description":"Generates an array, containing the Fibonacci sequence, up until the nth term."},"gcd":{"prefix":"30php_gcd","body":["function gcd(...$numbers)","{","    if (count($numbers) > 2) {","        return array_reduce($numbers, 'gcd');","    }","","    $r = $numbers[0] % $numbers[1];","    return $r === 0 ? abs($numbers[1]) : gcd($numbers[1], $r);","}",""],"description":"Calculates the greatest common divisor between two or more numbers."},"isEven":{"prefix":"30php_isEven","body":["function isEven($number)","{","    return ($number % 2) === 0;","}",""],"description":"Returns `true` if the given number is even, `false` otherwise."},"isPrime":{"prefix":"30php_isPrime","body":["function isPrime($number)","{","    $boundary = floor(sqrt($number));","    for ($i = 2; $i <= $boundary; $i++) {","        if ($number % $i === 0) {","            return false;","        }","    }","","    return $number >= 2;","}",""],"description":"Checks if the provided integer is a prime number."},"lcm":{"prefix":"30php_lcm","body":["function lcm(...$numbers)","{","    $ans = $numbers[0];","    for ($i = 1, $max = count($numbers); $i < $max; $i++) {","        $ans = (($numbers[$i] * $ans) \/ gcd($numbers[$i], $ans));","    }","","    return $ans;","}",""],"description":"Returns the least common multiple of two or more numbers."},"median":{"prefix":"30php_median","body":["function median($numbers)","{","    sort($numbers);","    $totalNumbers = count($numbers);","    $mid = floor($totalNumbers \/ 2);","","    return ($totalNumbers % 2) === 0 ? ($numbers[$mid - 1] + $numbers[$mid]) \/ 2 : $numbers[$mid];","}",""],"description":"Returns the median of an array of numbers."},"maxN":{"prefix":"30php_maxN","body":["function maxN($numbers)","{","    $maxValue = max($numbers);","    $maxValueArray = array_filter($numbers, function ($value) use ($maxValue) {","        return $maxValue === $value;","    });","","    return count($maxValueArray);","}",""],"description":"Returns the n maximum elements from the provided array."},"minN":{"prefix":"30php_minN","body":["function minN($numbers)","{","    $minValue = min($numbers);","    $minValueArray = array_filter($numbers, function ($value) use ($minValue) {","        return $minValue === $value;","    });","","    return count($minValueArray);","}",""],"description":"Returns the n minimum elements from the provided array."},"approximatelyEqual":{"prefix":"30php_approximatelyEqual","body":["function approximatelyEqual($number1, $number2, $epsilon = 0.001)","{","    return abs($number1 - $number2) < $epsilon;","}",""],"description":"Checks if two numbers are approximately equal to each other."},"clampNumber":{"prefix":"30php_clampNumber","body":["function clampNumber($num, $a, $b)","{","    return max(min($num, max($a, $b)), min($a, $b));","}",""],"description":"Clamps num within the inclusive range specified by the boundary values a and b."},"endsWith":{"prefix":"30php_endsWith","body":["function endsWith($haystack, $needle)","{","    return strrpos($haystack, $needle) === (strlen($haystack) - strlen($needle));","}",""],"description":"Check if a string is ends with a given substring."},"firstStringBetween":{"prefix":"30php_firstStringBetween","body":["function firstStringBetween($haystack, $start, $end)","{","    return trim(strstr(strstr($haystack, $start), $end, true), $start . $end);","}",""],"description":"Returns the first string there is between the strings from the parameter start and end."},"isAnagram":{"prefix":"30php_isAnagram","body":["function isAnagram($string1, $string2)","{","    return count_chars($string1, 1) === count_chars($string2, 1);","}",""],"description":"Compare two strings and returns `true` if both strings are anagram, `false` otherwise."},"isLowerCase":{"prefix":"30php_isLowerCase","body":["function isLowerCase($string)","{","    return $string === strtolower($string);","}",""],"description":"Returns `true` if the given string is lower case, `false` otherwise."},"isUpperCase":{"prefix":"30php_isUpperCase","body":["function isUpperCase($string)","{","    return $string === strtoupper($string);","}",""],"description":"Returns `true` if the given string is upper case, false otherwise."},"palindrome":{"prefix":"30php_palindrome","body":["function palindrome($string)","{","    return strrev($string) === (string) $string;","}",""],"description":"Returns `true` if the given string is a palindrome, `false` otherwise."},"startsWith":{"prefix":"30php_startsWith","body":["function startsWith($haystack, $needle)","{","    return strpos($haystack, $needle) === 0;","}",""],"description":"Check if a string starts with a given substring."},"countVowels":{"prefix":"30php_countVowels","body":["function countVowels($string)","{","    preg_match_all('\/[aeiou]\/i', $string, $matches);","","    return count($matches[0]);","}",""],"description":"Returns number of vowels in provided string."},"decapitalize":{"prefix":"30php_decapitalize","body":["function decapitalize($string, $upperRest = false)","{","    return lcfirst($upperRest ? strtoupper($string) : $string);","}",""],"description":"Decapitalizes the first letter of a string."},"isContains":{"prefix":"30php_isContains","body":["function isContains($string, $needle)","{","    return strpos($string, $needle) === false ? false : true;","}",""],"description":"Check if a word \/ substring exist in a given string input."},"compose":{"prefix":"30php_compose","body":["function compose(...$functions)","{","    return array_reduce(","        $functions,","        function ($carry, $function) {","            return function ($x) use ($carry, $function) {","                return $function($carry($x));","            };","        },","        function ($x) {","            return $x;","        }","    );","}",""],"description":"Return a new function that composes multiple functions into a single callable."},"memoize":{"prefix":"30php_memoize","body":["function memoize($func)","{","    return function () use ($func) {","        static $cache = [];","","        $args = func_get_args();","        $key = serialize($args);","        $cached = true;","","        if (!isset($cache[$key])) {","            $cache[$key] = $func(...$args);","            $cached = false;","        }","","        return ['result' => $cache[$key], 'cached' => $cached];","    };","}",""],"description":"Memoization of a function results in memory."},"curry":{"prefix":"30php_curry","body":["function curry($function)","{","    $accumulator = function ($arguments) use ($function, &$accumulator) {","        return function (...$args) use ($function, $arguments, $accumulator) {","            $arguments = array_merge($arguments, $args);","            $reflection = new ReflectionFunction($function);","            $totalArguments = $reflection->getNumberOfRequiredParameters();","","            if ($totalArguments <= count($arguments)) {","                return $function(...$arguments);","            }","","            return $accumulator($arguments);","        };","    };","","    return $accumulator([]);","}",""],"description":"Curries a function to take arguments in multiple calls."},"once":{"prefix":"30php_once","body":["function once($function)","{","    return function (...$args) use ($function) {","        static $called = false;","        if ($called) {","            return;","        }","        $called = true;","        return $function(...$args);","    };","}",""],"description":"Call a function only once."},"variadicFunction":{"prefix":"30php_variadicFunction","body":["function variadicFunction($operands)","{","    $sum = 0;","    foreach($operands as $singleOperand) {","        $sum += $singleOperand;","    }","    return $sum;","}",""],"description":"Variadic functions allows you to capture a variable number of arguments to a function."}}